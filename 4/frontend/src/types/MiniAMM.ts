/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MiniAMMInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FEE_DENOMINATOR"
      | "SWAP_FEE"
      | "addLiquidity"
      | "getK"
      | "getLPTokenAddress"
      | "getReserves"
      | "k"
      | "lpToken"
      | "removeLiquidity"
      | "swap"
      | "tokenX"
      | "tokenY"
      | "xReserve"
      | "yReserve"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AddLiquidity" | "RemoveLiquidity" | "Swap"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SWAP_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLPTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "k", values?: undefined): string;
  encodeFunctionData(functionFragment: "lpToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tokenX", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenY", values?: undefined): string;
  encodeFunctionData(functionFragment: "xReserve", values?: undefined): string;
  encodeFunctionData(functionFragment: "yReserve", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SWAP_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLPTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "k", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xReserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yReserve", data: BytesLike): Result;
}

export namespace AddLiquidityEvent {
  export type InputTuple = [
    xAmountIn: BigNumberish,
    yAmountIn: BigNumberish,
    lpTokenMinted: BigNumberish
  ];
  export type OutputTuple = [
    xAmountIn: bigint,
    yAmountIn: bigint,
    lpTokenMinted: bigint
  ];
  export interface OutputObject {
    xAmountIn: bigint;
    yAmountIn: bigint;
    lpTokenMinted: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveLiquidityEvent {
  export type InputTuple = [
    lpTokenAmount: BigNumberish,
    xAmountOut: BigNumberish,
    yAmountOut: BigNumberish
  ];
  export type OutputTuple = [
    lpTokenAmount: bigint,
    xAmountOut: bigint,
    yAmountOut: bigint
  ];
  export interface OutputObject {
    lpTokenAmount: bigint;
    xAmountOut: bigint;
    yAmountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapEvent {
  export type InputTuple = [
    xAmountIn: BigNumberish,
    yAmountIn: BigNumberish,
    xAmountOut: BigNumberish,
    yAmountOut: BigNumberish
  ];
  export type OutputTuple = [
    xAmountIn: bigint,
    yAmountIn: bigint,
    xAmountOut: bigint,
    yAmountOut: bigint
  ];
  export interface OutputObject {
    xAmountIn: bigint;
    yAmountIn: bigint;
    xAmountOut: bigint;
    yAmountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MiniAMM extends BaseContract {
  connect(runner?: ContractRunner | null): MiniAMM;
  waitForDeployment(): Promise<this>;

  interface: MiniAMMInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FEE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  SWAP_FEE: TypedContractMethod<[], [bigint], "view">;

  addLiquidity: TypedContractMethod<
    [xAmountIn: BigNumberish, yAmountIn: BigNumberish],
    [void],
    "nonpayable"
  >;

  getK: TypedContractMethod<[], [bigint], "view">;

  getLPTokenAddress: TypedContractMethod<[], [string], "view">;

  getReserves: TypedContractMethod<[], [[bigint, bigint]], "view">;

  k: TypedContractMethod<[], [bigint], "view">;

  lpToken: TypedContractMethod<[], [string], "view">;

  removeLiquidity: TypedContractMethod<
    [lpTokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  swap: TypedContractMethod<
    [xAmountIn: BigNumberish, yAmountIn: BigNumberish],
    [void],
    "nonpayable"
  >;

  tokenX: TypedContractMethod<[], [string], "view">;

  tokenY: TypedContractMethod<[], [string], "view">;

  xReserve: TypedContractMethod<[], [bigint], "view">;

  yReserve: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FEE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SWAP_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [xAmountIn: BigNumberish, yAmountIn: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getK"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLPTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getReserves"
  ): TypedContractMethod<[], [[bigint, bigint]], "view">;
  getFunction(nameOrSignature: "k"): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lpToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeLiquidity"
  ): TypedContractMethod<[lpTokenAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<
    [xAmountIn: BigNumberish, yAmountIn: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenX"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "xReserve"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "yReserve"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AddLiquidity"
  ): TypedContractEvent<
    AddLiquidityEvent.InputTuple,
    AddLiquidityEvent.OutputTuple,
    AddLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "RemoveLiquidity"
  ): TypedContractEvent<
    RemoveLiquidityEvent.InputTuple,
    RemoveLiquidityEvent.OutputTuple,
    RemoveLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "Swap"
  ): TypedContractEvent<
    SwapEvent.InputTuple,
    SwapEvent.OutputTuple,
    SwapEvent.OutputObject
  >;

  filters: {
    "AddLiquidity(uint256,uint256,uint256)": TypedContractEvent<
      AddLiquidityEvent.InputTuple,
      AddLiquidityEvent.OutputTuple,
      AddLiquidityEvent.OutputObject
    >;
    AddLiquidity: TypedContractEvent<
      AddLiquidityEvent.InputTuple,
      AddLiquidityEvent.OutputTuple,
      AddLiquidityEvent.OutputObject
    >;

    "RemoveLiquidity(uint256,uint256,uint256)": TypedContractEvent<
      RemoveLiquidityEvent.InputTuple,
      RemoveLiquidityEvent.OutputTuple,
      RemoveLiquidityEvent.OutputObject
    >;
    RemoveLiquidity: TypedContractEvent<
      RemoveLiquidityEvent.InputTuple,
      RemoveLiquidityEvent.OutputTuple,
      RemoveLiquidityEvent.OutputObject
    >;

    "Swap(uint256,uint256,uint256,uint256)": TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;
    Swap: TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;
  };
}
